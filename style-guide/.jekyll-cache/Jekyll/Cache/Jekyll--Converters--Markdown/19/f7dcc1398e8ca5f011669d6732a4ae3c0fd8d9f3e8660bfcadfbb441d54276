I"a<h1 id="pre-processors">Pre Processors</h1>
<p>ColourInstinct uses the SASS-CSS Preprocessor to convert SCSS to CSS. We considered using SCSS as very beneficials in terms of efficiency and expressiveness. Nesting had the advantage of being less time-consuming as well as ensuring a cleaner structured code. The highlight though was the use of variables which could be universally used throughout the files. In fact, it helps tremendously in normalizing the code and reducing redunancy. 
More information: https://sass-lang.com/</p>

<h1 id="file-structure">File Structure</h1>
<p>In order to maintain a clearly structured overview of the files and their content, we used the 7-1 pattern. Besides the official recommendation by the Sass Guidelines, we also came to the conclusion that the division in different topics was very helpful to search and find specific code partials.</p>

<h2 id="structure">Structure</h2>
<p>Generally, the structure is as follows:</p>

<pre><code class="language-/">sass/
|  
|– abstracts/  
|   |– _variables.scss    # Sass Variablen  
|   |– _functions.scss    # Sass Funktionen  
|   |– _mixins.scss       # Sass Mixins  
|   |– _placeholders.scss # Sass Platzhalter  
|
|– base/
|   |– _reset.scss        # Reset/normalize  
|   |– _typography.scss   # Regeln für Typographie  
|   …                     # Etc.  
|
|– components/
|   |– _buttons.scss      # Buttons  
|   |– _carousel.scss     # Carousel  
|   |– _cover.scss        # Cover  
|   |– _dropdown.scss     # Dropdown  
|   …                     # Etc.  
|
|– layout/
|   |– _navigation.scss   # Navigation  
|   |– _grid.scss         # Grid system  
|   |– _header.scss       # Header  
|   |– _footer.scss       # Footer  
|   |– _sidebar.scss      # Sidebar  
|   |– _forms.scss        # Forms  
|   …                     # Etc.  
|
|– pages/
|   |– _home.scss         # Home spezifische Styles  
|   |– _contact.scss      # Contact spezifische styles  
|   …                     # Etc.
|
|– themes/
|   |– _theme.scss        # Default-Theme  
|   |– _admin.scss        # Admin-Theme  
|   …                     # Etc.  
|
|– vendors/
|   |– _bootstrap.scss    # Bootstrap
|   |– _jquery-ui.scss    # jQuery UI
|   …                     # Etc.
|
|
`– main.scss              # Haupt Sass-Datei
</code></pre>

<p>More information: https://sass-guidelin.es/de/#das-7-1-muster</p>

<h1 id="units">Units</h1>
<p>Overall, the most-used units in the project are <code class="language-plaintext highlighter-rouge">rem</code> for fonts and <code class="language-plaintext highlighter-rouge">em</code> for scalable images and other components. A main advantage by using these units is the increased flexibility concerning the responsiveness as it is usually calculated based on the font-size.</p>

<p>Rarely, for instance for the hero or countdown, the units <code class="language-plaintext highlighter-rouge">vh</code> and <code class="language-plaintext highlighter-rouge">vw</code> were used in order to make sure that a certain percentage of the screen is covered. Though it was crucial to define either <code class="language-plaintext highlighter-rouge">max-width</code> or <code class="language-plaintext highlighter-rouge">min-width</code> to ensure a responsive layout on all resolutions.</p>

<p><code class="language-plaintext highlighter-rouge">px</code> is only used once for declaring the border-radius of e.g. boxes.</p>

<h1 id="css-normalize">CSS Normalize</h1>
<p>In order to reduce browser inconsistencies in things like default line heights, margins and font sizes of headings, we made use of the CSS reset file created by Eric A. Meyer</p>

<h2 id="file">File</h2>
<p>The file is as follows:</p>

<pre><code class="language-/">/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}
</code></pre>

<p>More information: https://meyerweb.com/ui/about.html</p>

<h1 id="spacings">Spacings</h1>
<p>In order to maintain equal spacing and other settings, single components are heavily based on universal mixins. For instance, boxes are design in consideration for different spacings.</p>

<h2 id="examples">Examples</h2>
<p>Boxes with different border-radius’ are defined as mixins and use the corresponding variables as declared in <em>/abstracts/_variables.scss</em>.</p>

<pre><code class="language-/">// /abstracts/_variables.scss
$border-radius-small: 3px;
$border-radius-medium: 5px;
$border-radius-large: 10px;

// /abstracts/_mixins.scss
@mixin box {
    @include shadow;

    background-color: $white;
    border-radius: $border-radius-large;
}

@mixin box--medium {
    @include shadow;

    background-color: $white;
    border-radius: $border-radius-medium;
}
</code></pre>

<p>Boxes with different margins and paddings are defined as mixins. Consequently, the corresponding elements use them if needed.</p>

<pre><code class="language-/">@mixin box__space {
    margin: 1em;
    padding: 1em;
}

@mixin box__space--small {
    margin: 1em;
    padding: 0.5em;
}

@mixin box__space--big {
    margin: 1em;
    padding: 2em;
}
</code></pre>

<h1 id="breakpoints">Breakpoints</h1>
<p>In order to maintain a responsive design, we declared the following breakpoints.</p>

<p>$tablet: “screen and (max-width: 1050px)”;
$mobile_big: “screen and (max-width: 730px)”;
$mobile: “screen and (max-width: 550px)”;
$mobile_little: “screen and (max-width: 370px)”;</p>

:ET